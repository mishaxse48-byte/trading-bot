import os
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import random

# –¢–æ–∫–µ–Ω —Ç–∞ chat_id
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
TG_CHAT_ID = os.environ.get("TG_CHAT_ID")

sending_signals = False

# –í–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏ –∑ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é –≤–∏–≥—ñ–¥–Ω–æ—Å—Ç—ñ (%)
currency_pairs = {
    "AED/CNY OTC": 92,
    "AUD/CAD OTC": 92,
    "AUD/CHF OTC": 92,
    "AUD/NZD OTC": 92,
    "AUD/USD OTC": 92,
    "CAD/CHF OTC": 92,
    "CHF/JPY OTC": 92,
    "EUR/GBP OTC": 92,
    "EUR/TRY OTC": 92,
    "EUR/USD OTC": 92,
    "NZD/JPY OTC": 92,
    "UAH/USD OTC": 92,
    "USD/JPY OTC": 58,
    "GBP/USD OTC": 64,
    # –¥–æ–¥–∞—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ –ø–∞—Ä–∏ –∑ —Ç–≤–æ—î—ó —Ç–∞–±–ª–∏—Ü—ñ...
}

def pick_best_pair():
    """–í–∏–±–∏—Ä–∞—î –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é ‚â• 70%"""
    best_pairs = {pair: chance for pair, chance in currency_pairs.items() if chance >= 70}
    if not best_pairs:
        return None
    # –æ–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑ –Ω–∞–π–≤–∏—â–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é
    max_chance = max(best_pairs.values())
    top_pairs = [pair for pair, chance in best_pairs.items() if chance == max_chance]
    return random.choice(top_pairs)

async def send_signal(app):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª –∑ –Ω–∞–π–≤–∏–≥—ñ–¥–Ω—ñ—à–æ—é –ø–∞—Ä–æ—é"""
    pair = pick_best_pair()
    if not pair:
        print("–ù–µ–º–∞—î –ø–∞—Ä –¥–ª—è —Å–∏–≥–Ω–∞–ª—É –∑ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—é –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é")
        return
    try:
        await app.bot.send_message(
            chat_id=int(TG_CHAT_ID),
            text=f"üìà –°–∏–≥–Ω–∞–ª –Ω–∞ 5-—Ö–≤–∏–ª–∏–Ω–Ω–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {pair}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤–∏–≥–æ–¥–∏: {currency_pairs[pair]}%"
        )
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    if sending_signals:
        await update.message.reply_text("–°–∏–≥–Ω–∞–ª–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è ‚è≥")
        return
    sending_signals = True
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –¢–≤—ñ–π chat_id: {chat_id}")
    await update.message.reply_text("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è 3 —Å–∏–≥–Ω–∞–ª—ñ–≤ —á–µ—Ä–µ–∑ 3 —Ö–≤–∏–ª–∏–Ω–∏ ‚úÖ")

    for i in range(3):
        if not sending_signals:
            break
        await send_signal(context.application)
        if i < 2:
            await asyncio.sleep(180)  # 3 —Ö–≤–∏–ª–∏–Ω–∏
    sending_signals = False
    await update.message.reply_text("–í—Å—ñ —Å–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = False
    await update.message.reply_text("–°–∏–≥–Ω–∞–ª–∏ –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.run_polling()

if __name__ == "__main__":
    main()
