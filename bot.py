import os
import asyncio
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# üîë –¢–≤—ñ–π API –∫–ª—é—á Alpha Vantage
ALPHA_VANTAGE_KEY = "TMCO3557CFCJRLRX"

# ‚ö° –î–∞–Ω—ñ –¥–ª—è Telegram
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
TG_CHAT_ID = os.environ.get("TG_CHAT_ID")

sending_signals = False

# üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Alpha Vantage
def get_forex_signal(pair="EUR/USD"):
    from_symbol, to_symbol = pair.split("/")
    url = (
        f"https://www.alphavantage.co/query?function=FX_INTRADAY&from_symbol={from_symbol}"
        f"&to_symbol={to_symbol}&interval=5min&apikey={ALPHA_VANTAGE_KEY}&outputsize=compact"
    )

    response = requests.get(url)
    data = response.json()

    if "Time Series FX (5min)" not in data:
        return None

    candles = data["Time Series FX (5min)"]
    times = sorted(candles.keys(), reverse=True)

    if len(times) < 2:
        return None

    last = candles[times[0]]
    prev = candles[times[1]]

    last_close = float(last["4. close"])
    prev_close = float(prev["4. close"])

    direction = "UP üìà (Buy)" if last_close > prev_close else "DOWN üìâ (Sell)"
    probability = round(abs((last_close - prev_close) / prev_close) * 100, 2)

    return {
        "pair": pair,
        "direction": direction,
        "last_close": last_close,
        "probability": probability,
    }

# üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–∏–≥–Ω–∞–ª —É Telegram
async def send_signal(app, pair="EUR/USD"):
    signal = get_forex_signal(pair)
    if signal:
        message = (
            f"üìä –°–∏–≥–Ω–∞–ª –Ω–∞ 5-—Ö–≤ —Ç–∞–π–º—Ñ—Ä–µ–π–º\n"
            f"–í–∞–ª—é—Ç–Ω–∞ –ø–∞—Ä–∞: {signal['pair']}\n"
            f"–ù–∞–ø—Ä—è–º–æ–∫: {signal['direction']}\n"
            f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {signal['probability']}%\n"
            f"–¶—ñ–Ω–∞: {signal['last_close']}"
        )
        await app.bot.send_message(chat_id=int(TG_CHAT_ID), text=message)
    else:
        await app.bot.send_message(chat_id=int(TG_CHAT_ID), text="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª")

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –¢–≤—ñ–π chat_id: {chat_id}")

    if sending_signals:
        await update.message.reply_text("–°–∏–≥–Ω–∞–ª–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è ‚è≥")
        return

    sending_signals = True
    await update.message.reply_text("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è 3 —Å–∏–≥–Ω–∞–ª—ñ–≤ —á–µ—Ä–µ–∑ 3 —Ö–≤–∏–ª–∏–Ω–∏ ‚úÖ")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ 3 —Å–∏–≥–Ω–∞–ª–∏ –ø—ñ–¥—Ä—è–¥ –∫–æ–∂–Ω—ñ 3 —Ö–≤–∏–ª–∏–Ω–∏
    pairs = ["EUR/USD", "GBP/USD", "AUD/USD", "USD/JPY"]
    for i in range(3):
        if not sending_signals:
            break
        pair = pairs[i % len(pairs)]
        await send_signal(context.application, pair)
        if i < 2:
            await asyncio.sleep(180)

    sending_signals = False
    await update.message.reply_text("‚úÖ –í—Å—ñ —Å–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")

# üõë –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = False
    await update.message.reply_text("–°–∏–≥–Ω–∞–ª–∏ –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")

# üîß –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.run_polling()

if __name__ == "__main__":
    main()
