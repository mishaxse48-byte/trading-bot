import asyncio
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

sending_signals = False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    chat_id = update.effective_chat.id

    if sending_signals:
        await update.message.reply_text("–°–∏–≥–Ω–∞–ª–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è ‚è≥")
        return

    sending_signals = True
    await update.message.reply_text(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –¢–≤—ñ–π chat_id: {chat_id}")
    await update.message.reply_text("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è 3 —Å–∏–≥–Ω–∞–ª—ñ–≤ –∫–æ–∂–Ω—ñ 3 —Ö–≤–∏–ª–∏–Ω–∏ ‚úÖ")

    for i in range(3):
        if not sending_signals:
            break
        await context.bot.send_message(chat_id=chat_id, text=f"üîî –°–∏–≥–Ω–∞–ª {i+1} –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")
        if i < 2:
            await asyncio.sleep(180)  # 3 —Ö–≤–∏–ª–∏–Ω–∏

    sending_signals = False
    await update.message.reply_text("–í—Å—ñ 3 —Å–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = False
    await update.message.reply_text("–°–∏–≥–Ω–∞–ª–∏ –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")

def main():
    TOKEN = os.environ.get("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.run_polling()  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫

if __name__ == "__main__":
    main()
