import os
import asyncio
import random
import yfinance as yf
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –¢–æ–∫–µ–Ω —ñ chat_id
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
TG_CHAT_ID = os.environ.get("TG_CHAT_ID")

# –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
sending_signals = False

# –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä, —è–∫—ñ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏–º–µ–º–æ
CURRENCY_PAIRS = ["EURUSD=X", "GBPUSD=X", "USDJPY=X", "AUDUSD=X", "USDCAD=X"]

async def generate_signal():
    """–ü—Ä–æ—Å—Ç–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤–∏–≥—ñ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É (~70%)"""
    pair = random.choice(CURRENCY_PAIRS)
    # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ü—ñ–Ω—É –∑ Yahoo Finance
    data = yf.download(pair, period="1d", interval="1m")
    last_price = data["Close"].iloc[-1]
    
    # –ü—Ä–æ—Å—Ç–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª —ñ–∑ 70% –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é –≤–∏–≥—Ä–∞—à—É
    action = random.choices(["BUY", "SELL"], weights=[0.7, 0.3])[0]
    
    signal_text = f"üîî –¢–æ—Ä–≥—ñ–≤–µ–ª—å–Ω–∏–π —Å–∏–≥–Ω–∞–ª:\n–ü–∞—Ä–∞: {pair}\n–î—ñ—è: {action}\n–¶—ñ–Ω–∞: {last_price:.5f}"
    return signal_text

async def send_signal(app):
    """–ù–∞–¥—Å–∏–ª–∞—î –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª"""
    if TG_CHAT_ID:
        signal = await generate_signal()
        await app.bot.send_message(chat_id=int(TG_CHAT_ID), text=signal)

async def signal_loop(app):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è 3 —Å–∏–≥–Ω–∞–ª—ñ–≤ —á–µ—Ä–µ–∑ 3 —Ö–≤–∏–ª–∏–Ω–∏, –º–æ–∂–Ω–∞ –∑—É–ø–∏–Ω–∏—Ç–∏ —á–µ—Ä–µ–∑ /stop"""
    global sending_signals
    for i in range(3):
        if not sending_signals:
            break
        await send_signal(app)
        if i < 2:  # –º—ñ–∂ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –ø–∞—É–∑–∞ 3 —Ö–≤–∏–ª–∏–Ω–∏
            await asyncio.sleep(180)
    sending_signals = False
    if TG_CHAT_ID:
        await app.bot.send_message(chat_id=int(TG_CHAT_ID), text="–í—Å—ñ —Å–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = True
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –¢–≤—ñ–π chat_id: {chat_id}")
    await update.message.reply_text("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è 3 —Å–∏–≥–Ω–∞–ª—ñ–≤ –∫–æ–∂–Ω—ñ 3 —Ö–≤–∏–ª–∏–Ω–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ ‚úÖ")
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª —Å–∏–≥–Ω–∞–ª—ñ–≤
    asyncio.create_task(signal_loop(context.application))

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = False
    await update.message.reply_text("–°–∏–≥–Ω–∞–ª–∏ –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî\n–ë–æ—Ç –≤–∏–º–∫–Ω—É–≤ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.run_polling()  # –æ–¥–∏–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫

if __name__ == "__main__":
    main()
