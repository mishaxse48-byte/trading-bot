import os
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, Context

# –¢–æ–∫–µ–Ω —ñ chat_id –∑ Environment Variables
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
TG_CHAT_ID = os.environ.get("TG_CHAT_ID")  # —á–∏—Å–ª–æ–≤–∏–π chat_id

# –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
sending_signals = False

async def send_signal(app, pair="EUR/USD"):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ—ó –ø–∞—Ä–∏"""
    if TG_CHAT_ID:
        try:
            await app.bot.send_message(
                chat_id=int(TG_CHAT_ID),
                text=f"üîî –°–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ: {pair} –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!"
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É: {e}")

async def signal_sequence(app, pair="EUR/USD"):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è 3 —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3 —Ö–≤"""
    global sending_signals
    for i in range(3):
        if not sending_signals:
            break
        await send_signal(app, pair)
        if i < 2:
            await asyncio.sleep(180)  # 3 —Ö–≤–∏–ª–∏–Ω–∏
    sending_signals = False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = True
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –¢–≤—ñ–π chat_id: {chat_id}")
    await update.message.reply_text("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è 3 —Å–∏–≥–Ω–∞–ª—ñ–≤ –∫–æ–∂–Ω—ñ 3 —Ö–≤–∏–ª–∏–Ω–∏ ‚úÖ")
    asyncio.create_task(signal_sequence(context.application, pair="EUR/USD"))

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = False
    await update.message.reply_text("–°–∏–≥–Ω–∞–ª–∏ –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")
    await update.message.reply_text("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤–∏–º–∫–Ω–µ–Ω–æ ‚õî")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    # Webhook –¥–ª—è Render
    PORT = int(os.environ.get("PORT", 8443))
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –º–∞—î –±—É—Ç–∏ https://yourdomain/path
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
