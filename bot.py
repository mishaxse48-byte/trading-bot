import os
import asyncio
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests  # –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Pocket Broker API (—è–∫—â–æ –±—É–¥–µ)

# ----------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
# ----------------------------
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
TG_CHAT_ID = os.environ.get("TG_CHAT_ID")  # —á–∏—Å–ª–æ–≤–∏–π ID

logging.basicConfig(level=logging.INFO)

# ----------------------------
# –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤
# ----------------------------
sending_signals = False

# ----------------------------
# –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook
# ----------------------------
def delete_webhook():
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook"
    try:
        r = requests.post(url)
        if r.status_code == 200:
            logging.info("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        else:
            logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ webhook: {r.text}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ webhook: {e}")

# ----------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É
# ----------------------------
async def send_signal(app, pair="EUR/USD", action="BUY", confidence=70):
    """
    –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª –≤ Telegram.
    pair: –≤–∞–ª—é—Ç–Ω–∞ –ø–∞—Ä–∞
    action: BUY –∞–±–æ SELL
    confidence: % –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ—ó —É–≥–æ–¥–∏
    """
    if TG_CHAT_ID and sending_signals:
        text = f"üîî –°–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ!\n–ü–∞—Ä–∞: {pair}\n–î—ñ—è: {action}\n–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤–∏–≥–æ–¥–∏: {confidence}%"
        await app.bot.send_message(chat_id=int(TG_CHAT_ID), text=text)

# ----------------------------
# –§—É–Ω–∫—Ü—ñ—è —Ü–∏–∫–ª—É —Å–∏–≥–Ω–∞–ª—ñ–≤ (3 —Å–∏–≥–Ω–∞–ª–∏ —á–µ—Ä–µ–∑ 3 —Ö–≤)
# ----------------------------
async def signal_loop(app, pair="EUR/USD", action="BUY"):
    global sending_signals
    for i in range(3):
        if not sending_signals:
            break
        # –¢—É—Ç –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ Pocket Broker API
        confidence = 70  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä–æ–±–∏–º–æ —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å
        await send_signal(app, pair, action, confidence)
        if i < 2:
            await asyncio.sleep(180)  # 3 —Ö–≤–∏–ª–∏–Ω–∏
    sending_signals = False
    await app.bot.send_message(chat_id=int(TG_CHAT_ID), text="–í—Å—ñ —Å–∏–≥–Ω–∞–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ ‚õî")

# ----------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
# ----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = True
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –¢–≤—ñ–π chat_id: {chat_id}")
    await update.message.reply_text("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ ‚úÖ")
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π —Ü–∏–∫–ª —Å–∏–≥–Ω–∞–ª—ñ–≤
    asyncio.create_task(signal_loop(context.application))

# ----------------------------
# –ö–æ–º–∞–Ω–¥–∞ /stop
# ----------------------------
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global sending_signals
    sending_signals = False
    await update.message.reply_text("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –≤–∏–º–∫–Ω–µ–Ω–æ ‚õî")

# ----------------------------
# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
# ----------------------------
def main():
    # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ webhook, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
    delete_webhook()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫)
    app.run_polling()
    logging.info("Bot started successfully")

# ----------------------------
if __name__ == "__main__":
    main()
